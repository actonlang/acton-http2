import testing

class Deflater:
    _deflater: u64

    def __init__(self):
        pass # TODO: remove, but actonc bug!?
        self._init_deflater()

    def _init_deflater(self):
        NotImplemented

    def __del__(self):
        NotImplemented

    def deflate(self, headers: dict[str, str]) -> bytes:
        NotImplemented

class Inflater:
    _inflater: u64

    def __init__(self):
        pass # TODO: remove, but actonc bug!?
        self._init_inflater()

    def _init_inflater(self):
        NotImplemented

    def __del__(self):
        NotImplemented

    def inflate(self, compressed_headers: bytes) -> dict[str, str]:
        NotImplemented


def _test_roundtrip():
    deflater = Deflater()
    inflater = Inflater()

    headers = { 'foo': 'bar', 'baz': 'qux' }
    compressed = deflater.deflate(headers)
    print("compressed:", compressed)
    decompressed = inflater.inflate(compressed)
    print("decompressed:", decompressed)

    testing.assertEqual(headers, decompressed)


actor main(env):
    _test_roundtrip()
    env.exit(0)

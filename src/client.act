import net
import hpack

CLIENT_PREFACE: bytes = b'PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n'


class Frame:
    def __init__(self):
        self.stream_id = 0

    def __str__(self):
        return 'Frame()'

    def serialize(self):
        return b''

PADDED: u32 = 0x8
END_STREAM: u32 = 0x1

class DataFrame(Frame):

    def __init__(self, data: bytes, pad_len: int, stream_id: u32, end_stream=False):
        self.data = data
        self.pad_len = pad_len
        self.stream_id = stream_id
        self.end_stream = end_stream

    def __str__(self):
        data_excerpt = self.data if len(self.data) < 20 else self.data[:20]
        return 'DataFrame(data=' + str(data_excerpt) + ', pad_len=' + str(self.pad_len) + ', stream_id=' + str(self.stream_id) + ', end_stream=' + str(self.end_stream) + ')'

    def serialize(self):
        serialized = b''

        length = u32(len(self.data))
        flags: u32 = 0x0
        if self.pad_len > 0:
            length += u32(self.pad_len + 1)
            flags |= PADDED

        if self.end_stream:
            flags |= END_STREAM

        serialized += bytes([int(length & 0xFF0000), int(length & 0xFF00), int(length & 0xFF)])
        # Type field
        serialized += bytes([0x00])
        serialized += bytes([int(flags)])
        serialized += bytes([int(self.stream_id & 0x7F000000), int(self.stream_id & 0xFF0000), int(self.stream_id & 0xFF00), int(self.stream_id & 0xFF)])
        if self.pad_len > 0:
            serialized += bytes([self.pad_len & 0xFF])
        serialized += self.data
        serialized += b'\x00' * self.pad_len

        return serialized

PRIORITY: u32 = 0x20
END_HEADERS: u32 = 0x04

class HeadersFrame(Frame):
    def __init__(self, field_data: bytes, pad_len: int, stream_id: u32, priority: bool, end_headers: bool, end_stream: bool):
        self.field_data = field_data
        self.pad_len = pad_len
        self.stream_id = stream_id
        self.priority = priority
        self.end_headers = end_headers
        self.end_stream = end_stream

    def __str__(self):
        data_excerpt = self.field_data if len(self.field_data) < 20 else self.field_data[:20]
        return 'HeadersFrame(field_data=' + str(data_excerpt) + ', pad_len=' + str(self.pad_len) + ', stream_id=' + str(self.stream_id) + ', priority=' + str(self.priority) +', end_headers=' + str(self.end_headers) +', end_stream=' + str(self.end_stream) + ')'

    def serialize(self) -> bytes:
        serialized = b''

        length = len(self.field_data)

        flags:u32 = 0x0
        if self.pad_len > 0:
            length += self.pad_len + 1
            flags |= PADDED

        if self.priority:
            length += 5
            flags |= PRIORITY
        if self.end_headers:
            flags |= END_HEADERS
        if self.end_stream:
            flags |= END_STREAM

        length32: u32 = u32(length)

        serialized += bytes([int((length32 & 0xFF0000) >> 16), int((length32 & 0xFF00) >> 8), int(length32 & 0xFF)])
        # Type field
        serialized += bytes([0x01])
        serialized += bytes([int(flags)])
        serialized += bytes([int((self.stream_id & 0x7F000000) >> 24), int((self.stream_id & 0xFF0000) >> 16), int((self.stream_id & 0xFF00) >> 8), int(self.stream_id & 0xFF)])
        if self.pad_len > 0:
            serialized += bytes([self.pad_len & 0xFF])
        if self.priority:
            # Stub for implementing priority later
            pass
        serialized += self.field_data
        serialized += b'\x00' * self.pad_len

        return serialized

class PriorityFrame(Frame):
    pass

class RstStreamFrame(Frame):
    def __init__(self, error_code: int, stream_id: u32):
        self.error_code = error_code
        self.stream_id = stream_id

    def __str__(self) -> str:
        return 'RstStreamFrame(error_code=' + str(self.error_code) + ', stream_id=' + str(self.stream_id) + ')'

    def serialize(self) -> bytes:
        serialized = b''
        serialized += bytes([0x00, 0x00, 0x04])
        # Type field
        serialized += bytes([0x03])
        serialized += bytes([0x00])
        serialized += bytes([int((self.stream_id & 0x7F000000) >> 24), int((self.stream_id & 0xFF0000) >> 16), int((self.stream_id & 0xFF00) >> 8), int(self.stream_id & 0xFF)])
        error_code32 = u32(self.error_code)
        serialized += bytes([int((error_code32 & 0xFF000000) >> 24), int((error_code32 & 0xFF0000) >> 16), int((error_code32 & 0xFF00) >> 8), int(error_code32 & 0xFF)])

        return serialized
        

class SettingsFrame(Frame):
    def __init__(self, settings: dict[u16, u32], ack: bool = False):
        self.settings = settings

        #if ack and len(self.settings > 0):
        #    raise ValueError("ACK flag cannot coincide with payload in SETTINGS frame")

        self.ack = ack

    def __str__(self) -> str:
        return 'SettingsFrame(settings=' + str(self.settings) + ', ack=' + str(self.ack) + ')'

    def serialize(self) -> bytes:
        serialized = b''

        length: int = len(self.settings) * 6
        # XXX Workaround for u32 bug
        # XXX Remove when that's fixed
        if length == 0:
            length = 0

        flags: int = 0x01 if self.ack else 0x00

        length32: u32 = u32(length)

        serialized += bytes([int((length32 & 0xFF0000) >> 16), int((length32 & 0xFF00) >> 8), int(length32 & 0xFF)])
        # Type field
        serialized += bytes([0x04])
        serialized += bytes([flags])
        # Stream ID always 0 for settings frame
        serialized += bytes([0x00, 0x00, 0x00, 0x00])
        #for name, value in self.settings.items():
        #    #stub settings payload for now
        #    pass

        return serialized

class PushPromiseFrame(Frame):
    def __init__(self, promised_stream_id: u32, field_data: bytes, pad_len: int, stream_id: u32, end_headers: bool):
        self.field_data = field_data
        self.pad_len = pad_len
        self.promised_stream_id = promised_stream_id
        self.stream_id = stream_id
        self.end_headers = end_headers

    def __str__(self):
        data_excerpt = self.field_data if len(self.field_data) < 20 else self.field_data[:20]
        return 'PushPromiseFrame(field_data=' + str(data_excerpt) + ', pad_len=' + str(self.pad_len) + ', promised_stream_id=' + str(self.promised_stream_id) + ', stream_id=' + str(self.stream_id) + ', end_headers=' + str(self.end_headers) + ')'

    def serialize(self) -> bytes:
        serialized = b''

        length = len(self.field_data) + 4

        flags:u32 = 0x0
        if self.pad_len > 0:
            length += self.pad_len + 1
            flags |= PADDED

        if self.end_headers:
            flags |= END_HEADERS

        length32: u32 = u32(length)

        serialized += bytes([int((length32 & 0xFF0000) >> 16), int((length32 & 0xFF00) >> 8), int(length32 & 0xFF)])
        # Type field
        serialized += bytes([0x01])
        serialized += bytes([int(flags)])
        serialized += bytes([int((self.stream_id & 0x7F000000) >> 24), int((self.stream_id & 0xFF0000) >> 16), int((self.stream_id & 0xFF00) >> 8), int(self.stream_id & 0xFF)])
        if self.pad_len > 0:
            serialized += bytes([self.pad_len & 0xFF])
        serialized += bytes([int((self.promised_stream_id & 0x7F000000) >> 24), int((self.promised_stream_id & 0xFF0000) >> 16), int((self.promised_stream_id & 0xFF00) >> 8), int(self.promised_stream_id & 0xFF)])
        serialized += self.field_data
        serialized += b'\x00' * self.pad_len

        return serialized

class PingFrame(Frame):
    def __init__(self, ack: bool, data: bytes):
        self.ack = ack
        self.data = data

    def __str__(self) -> str:
        return 'PingFrame(ack=' + str(self.ack) + ', data=' + str(self.data) + ')'

    def serialize(self) -> bytes:
        serialized = b''
        flags: int = 0x01 if self.ack else 0x00

        # Length 0x8
        serialized += bytes([0x00, 0x00, 0x08])
        # Frame type
        serialized += bytes([0x06])

        serialized += bytes([flags])

        # Stream ID always 0
        serialized += bytes([0x00, 0x00, 0x00, 0x00])

        serialized += self.data

        return serialized

class GoAwayFrame(Frame):
    def __init__(self, last_stream_id: u32, error_code: int, debug_data: bytes):
        self.last_stream_id = last_stream_id
        self.error_code = error_code
        self.debug_data = debug_data

    def __str__(self) -> str:
        return 'GoAwayFrame(last_stream_id=' + str(self.last_stream_id) + ', error_code=' + str(self.error_code) + ', debug_data=' + str(self.debug_data) + ')'

class WindowUpdateFrame(Frame):
    def __init__(self, increment_size: u32, stream_id: u32):
        self.increment_size = increment_size
        self.stream_id = stream_id

    def serialize(self) -> bytes:
        serialized = b''

        # Length 0x4
        serialized += bytes([0x00, 0x00, 0x04])
        # Frame type
        serialized += bytes([0x08])

        # Blank flags
        serialized += bytes([0x00])

        serialized += bytes([int((self.stream_id & 0x7F000000) >> 24), int((self.stream_id & 0xFF0000) >> 16), int((self.stream_id & 0xFF00) >> 8), int(self.stream_id & 0xFF)])

        serialized += bytes([int((self.increment_size & 0x7F000000) >> 24), int((self.increment_size & 0xFF0000) >> 16), int((self.increment_size & 0xFF00) >> 8), int(self.increment_size & 0xFF)])

        return serialized

    def __str__(self) -> str:
        return 'WindowUpdateFrame(increment_size=' + str(self.increment_size) + ', stream_id=' + str(self.stream_id) + ')'
        

class ContinuationFrame(Frame):
    def __init__(self, field_data: bytes, stream_id: u32, end_headers: bool):
        self.field_data = field_data
        self.stream_id = stream_id
        self.end_headers = end_headers

    def __str__(self):
        data_excerpt = self.field_data if len(self.field_data) < 20 else self.field_data[:20]
        return 'ContinuationFrame(field_data=' + str(data_excerpt) + ', stream_id=' + str(self.stream_id) + ', end_headers=' + str(self.end_headers) + ')'

    def serialize(self) -> bytes:
        serialized = b''

        length = len(self.field_data)

        flags:u32 = 0x0

        if self.end_headers:
            flags |= END_HEADERS

        length32: u32 = u32(length)

        serialized += bytes([int((length32 & 0xFF0000) >> 16), int((length32 & 0xFF00) >> 8), int(length32 & 0xFF)])
        # Type field
        serialized += bytes([0x01])
        serialized += bytes([int(flags)])
        serialized += bytes([int((self.stream_id & 0x7F000000) >> 24), int((self.stream_id & 0xFF0000) >> 16), int((self.stream_id & 0xFF00) >> 8), int(self.stream_id & 0xFF)])
        serialized += self.field_data

        return serialized

# stream states
IDLE: int = 0
OPEN: int = 1
RESERVED_LOCAL: int = 2
RESERVED_REMOTE: int = 3
HALFCLOSED_LOCAL: int = 4
HALFCLOSED_REMOTE: int = 5
CLOSED: int = 6
HEADERS_CONTINUE: int = 7
PP_CONTINUE: int = 8


class Response(object):
    headers: dict[str, str]
    data: bytes
    outstanding_streams: dict[u32, u32]

    def __init__(self, request_headers: dict[str, str], on_response: action(Http2Client, dict[str, str], bytes) -> None):
        self.request_headers = request_headers
        self.headers = {}
        self.data = b''
        self.on_response = on_response
        self.outstanding_streams = {}

    def stream_response(self, stream_id: u32, headers: dict[str, str], data: bytes) -> bool:
        for header_name, header_val in headers.items():
            self.headers[header_name] = header_val

        self.data += data

        #self.outstanding_streams[stream_id] = False

        for waiting in self.outstanding_streams.values():
            if waiting:
                return False

        return True

class StreamState(object):
    def next_state_recv(self, frame: Frame) -> StreamState:
        return self
    def next_state_send(self, frame: Frame) -> StreamState:
        return self

class IdleState(StreamState):
    def __init__(self):
        pass
    def next_state_recv(self, frame: Frame) -> StreamState:
        return self
    def next_state_send(self, frame: Frame) -> StreamState:
        return self

class OpenState(StreamState):
    def __init__(self):
        pass
    def next_state_recv(self, frame: Frame) -> StreamState:
        if isinstance(frame, DataFrame):
            if frame.end_stream:
                return HalfClosedRemoteState()
            else:
                return self
        elif isinstance(frame, HeadersFrame):
            next_state: StreamState = self

            if frame.end_stream:
                next_state = HalfClosedRemoteState()
            if not frame.end_headers:
                next_state = HeadersContinueState(next_state)

            return next_state
        elif isinstance(frame, PushPromiseFrame):
            next_state: StreamState = self

            if not frame.end_headers:
                next_state = PPContinueState(next_state, frame.promised_stream_id)

            return next_state
        elif isinstance(frame, RstStreamFrame):
            return ClosedState()
        else:
            return self
    def next_state_send(self, frame: Frame) -> StreamState:
        if isinstance(frame, DataFrame):
            if frame.end_stream:
                return HalfClosedLocalState()
            else:
                return self
        elif isinstance(frame, HeadersFrame):
            next_state: StreamState = self

            if frame.end_stream:
                next_state = HalfClosedLocalState()

            return next_state
        elif isinstance(frame, RstStreamFrame):
            return ClosedState()
        else:
            return self

class ReservedLocalState(StreamState):
    def __init__(self):
        pass
    def next_state_recv(self, frame: Frame) -> StreamState:
        return self
    def next_state_send(self, frame: Frame) -> StreamState:
        return self

class ReservedRemoteState(StreamState):
    def __init__(self):
        pass
    def next_state_recv(self, frame: Frame) -> StreamState:
        return self
    def next_state_send(self, frame: Frame) -> StreamState:
        return self

class HalfClosedLocalState(StreamState):
    def __init__(self):
        pass
    def next_state_recv(self, frame: Frame) -> StreamState:
        if isinstance(frame, DataFrame):
            if frame.end_stream:
                return ClosedState()
            else:
                return self
        return self
    def next_state_send(self, frame: Frame) -> StreamState:
        return self

class HalfClosedRemoteState(StreamState):
    def __init__(self):
        pass
    def next_state_recv(self, frame: Frame) -> StreamState:
        return self
    def next_state_send(self, frame: Frame) -> StreamState:
        return self

class ClosedState(StreamState):
    def __init__(self):
        pass
    def next_state_recv(self, frame: Frame) -> StreamState:
        return self
    def next_state_send(self, frame: Frame) -> StreamState:
        return self

class HeadersContinueState(StreamState):
    def __init__(self, follow_state):
        self.follow_state = follow_state

    def next_state_recv(self, frame: Frame) -> StreamState:
        if isinstance(frame, ContinuationFrame):
            if frame.end_headers:
                return self.follow_state
            else:
                return self
        else:
            return InvalidState()

    def next_state_send(self, frame: Frame) -> StreamState:
        return self

class PPContinueState(StreamState):
    def __init__(self, follow_state, promised_stream_id):
        self.follow_state = follow_state
        self.promised_stream_id = promised_stream_id

    def next_state_recv(self, frame: Frame) -> StreamState:
        if isinstance(frame, ContinuationFrame):
            if frame.end_headers:
                return self.follow_state
            else:
                return self
        else:
            return InvalidState()

    def next_state_send(self, frame: Frame) -> StreamState:
        return self

class InvalidState(StreamState):
    def __init__(self):
        pass
    def next_state_recv(self, frame: Frame) -> StreamState:
        return self
    def next_state_send(self, frame: Frame) -> StreamState:
        return self

class Stream(object):
    stream_id: u32
    client: Http2Client
    state: StreamState
    fields_buffer: bytes
    pp_fields_buffer: bytes
    data_buffer: bytes

    def __init__(self, stream_id: u32, init_state: StreamState = OpenState()):
        self.stream_id = stream_id
        self.fields_buffer = b''
        self.pp_fields_buffer = b''
        self.data_buffer = b''
        self.state = init_state

    def receive_frame(self, frame: Frame) -> (list[Frame], bool, bool, u32):
        following_state = self.state.next_state_recv(frame)

        reply_frames = []
        end_stream = False
        end_headers = False
        promised_stream_id = 0

        if isinstance(frame, PushPromiseFrame):
            self.pp_fields_buffer += frame.field_data
            reply_frames.append(WindowUpdateFrame(0x7fffffff, frame.promised_stream_id))
            promised_stream_id = frame.promised_stream_id
        elif isinstance(frame, DataFrame):
            self.data_buffer += frame.data
            reply_frames.append(WindowUpdateFrame(0x7fffffff, self.stream_id))
            end_stream = frame.end_stream
        elif isinstance(frame, HeadersFrame):
            self.fields_buffer += frame.field_data
            end_headers = frame.end_headers
            end_stream = (frame.end_stream and frame.end_headers)
        elif isinstance(frame, ContinuationFrame):
            if isinstance(self.state, HeadersContinueState):
                self.fields_buffer += frame.field_data
            if isinstance(self.state, PPContinueState):
                self.pp_fields_buffer += frame.field_data
            if isinstance(following_state, ClosedState):
                end_stream = True

        self.state = following_state
        return reply_frames, end_headers, end_stream, promised_stream_id

def decode_frame(buffer: bytes) -> (?Frame, int):
    if len(buffer) < 10:
        return None, 0

    length = (buffer[0] << 16) + (buffer[1] << 8) + buffer[2]
    type = buffer[3]
    flags = u32(buffer[4])
    stream_id = u32((buffer[5] << 24) + (buffer[6] << 16) +
                    (buffer[7] << 8) + buffer[8]) & 0x7fffffff

    buffer = buffer[9:]
    remaining_length = len(buffer)
    #print('Decoding frame of type ', type, ' for stream ', stream_id, ' with length ', length)
    if remaining_length < length:
        print('Incomplete frame data in buffer (', remaining_length, '/', length, ' bytes received)')
        return None, 0

    if type == 0:
        # DATA
        pad_len = 0
        end_stream = bool(flags & END_STREAM)
        if flags & PADDED:
            pad_len = buffer[0]
            buffer = buffer[1:]
        data = buffer[:length-pad_len]
        return DataFrame(data, pad_len, stream_id, end_stream), (length + 9)
    elif type == 1:
        # HEADERS
        pad_len = 0
        field_data_len = length
        priority = bool(flags & PRIORITY)
        end_headers = bool(flags & END_HEADERS)
        end_stream = bool(flags & END_STREAM)
        if flags & PADDED:
            pad_len = buffer[0]
            buffer = buffer[1:]
            field_data_len -= (1 + pad_len)
        if priority:
            stream_dependency = u32((buffer[0] << 24) + (buffer[1] << 16) +
                                    (buffer[2] << 8) + buffer[3]) & 0x7fffffff
            weight = buffer[4]
            buffer = buffer[5:]
            field_data_len -= 5
        return HeadersFrame(buffer[:field_data_len], pad_len, stream_id, priority, end_headers, end_stream), (length + 9)
    elif type == 3:
        error_code = ((buffer[0] << 24) + (buffer[1] << 16) +
                      (buffer[2] << 8) + buffer[3])
        return RstStreamFrame(error_code, stream_id), 13
    elif type == 4:
        # SETTINGS
        settings = {}
        for i in range(0, length, 6):
            setting_id = u16((buffer[i] << 8) + buffer[i + 1])
            setting_value = u32((buffer[i + 2] << 24) + (buffer[i + 3] << 16) +
                             (buffer[i + 4] << 8) + buffer[i + 5])
            settings[setting_id] = setting_value
        print('SETTINGS frame decoded, ', (length + 9), ' bytes consumed from buffer')
        return SettingsFrame(settings, flags == 0x1), (length + 9)
    elif type == 5:
        pad_len = 0
        field_data_len = length - 4
        end_headers = bool(flags & END_HEADERS)
        if flags & PADDED:
            pad_len = buffer[0]
            buffer = buffer[1:]
            field_data_len -= 1
        promised_stream_id = u32((buffer[0] << 24) + (buffer[1] << 16) +
                                 (buffer[2] << 8) + buffer[3]) & 0x7fffffff
        buffer = buffer[4:]
        return PushPromiseFrame(promised_stream_id, buffer[:field_data_len], pad_len, stream_id, end_headers), (length + 9)
    elif type == 7:
        last_stream_id = u32((buffer[0] << 24) + (buffer[1] << 16) +
                             (buffer[2] << 8) + buffer[3]) & 0x7fffffff
        error_code = ((buffer[0] << 24) + (buffer[1] << 16) +
                         (buffer[2] << 8) + buffer[3])
        debug_data = buffer[4:length]
        return GoAwayFrame(last_stream_id, error_code, debug_data), (length + 9)
    elif type == 8:
        increment_size = u32((buffer[0] << 24) + (buffer[1] << 16) +
                                 (buffer[2] << 8) + buffer[3]) & 0x7fffffff
        return WindowUpdateFrame(increment_size, stream_id), (length + 9)
    elif type == 9:
        # CONTINUATION
        field_data_len = length
        end_headers = bool(flags & END_HEADERS)
        return ContinuationFrame(buffer[:field_data_len], stream_id, end_headers), (length + 9)
        #return None, 0
        
        
    print("Unknown frame type", type)
    return None, 0


actor Http2Client(cap: net.TCPConnectCap, address: str, port: int, on_connect: action(Http2Client) -> None, on_error: action(Http2Client, str) -> None, tls_verify: bool=True, connect_timeout: float=10.0):

    var recv_buffer = b''
    var send_queue: list[Frame] = []
    var next_stream_id: u32 = 1
    var streams: dict[u32, Stream] = {}
    #var responses: dict[u32, Response] = {}
    var response_cbs: dict[u32, action(Http2Client, dict[str, str], bytes) -> None] = {}
    var raw_cbs: dict[u32, (action(Http2Client, dict[str, str]) -> None, action(Http2Client, bytes) -> None)] = {}
    var promised_pushes: list[(dict[str, str], Stream)] = []
    var inflater = hpack.Inflater()
    var deflater = hpack.Deflater()
    var ready: bool = False
    # safe constant for max size for now
    # should be configurable in settings
    var max_frame_size = 16384

    var tcp_conn: ?net.TCPConnection = None

    def _connect():
        #tls_port = port if port is not None else 443
        tcp_port = port if port is not None else 80

        #tls_conn = net.TLSConnection(cap, address, tls_port, _on_tls_connect, _on_tls_receive, _on_tls_error, _on_remote_close, tls_verify)
        tcp_conn = net.TCPConnection(cap, address, tcp_port, _on_tcp_connect, _on_tcp_receive, _on_tcp_error, _on_tcp_remote_close)

    def _on_tls_connect(con: net.TLSConnection) -> None:
        #on_connect(self)
        pass

    def _on_tls_receive(con: net.TLSConnection, data: bytes) -> None:
        #on_receive(self, data)
        pass

    def _on_tls_error(conn: net.TCPConnection, error: str) -> None:
        #on_error(self, error)
        pass

    def _on_tcp_remote_close(con: net.TCPConnection) -> None:
        #on_remote_close(self)
        pass

    def _on_tcp_connect(con: net.TCPConnection) -> None:
        #on_connect(self)
        print("Sending TCP data: ", CLIENT_PREFACE)
        con.write(CLIENT_PREFACE)
        
        send_bytes: bytes = SettingsFrame({}).serialize()
        print("Sending TCP data: ", send_bytes)
        con.write(send_bytes)
        ready = True
        _send_frames()

    def _on_tcp_receive(con: net.TCPConnection, data: bytes) -> None:
        print("Received TCP data:", data)
        recv_buffer += data
        print('First 100 bytes of recv_buffer: ', recv_buffer[:100])

        frames = []
        frame, consumed_bytes = decode_frame(recv_buffer)
        while frame is not None:
            if isinstance(frame, Frame):
                frames.append(frame)
                recv_buffer = recv_buffer[consumed_bytes:]
            frame, consumed_bytes = decode_frame(recv_buffer)
        
        for frame in frames:
            if isinstance(frame, SettingsFrame):
                print('Received settings frame', frame)
                #print(len(frame.settings), 'settings in frame')
                for setting in frame.settings.items():
                    print('  setting ', setting)
                if not frame.ack:
                    send_queue.append(SettingsFrame({}, True))
            elif isinstance(frame, GoAwayFrame):
                print('Received GOAWAY frame with Last-Stream-ID', frame.last_stream_id,
                      ' and error code', frame.error_code)
            elif isinstance(frame, WindowUpdateFrame):
                if frame.stream_id == 0:
                    print('Received global WINDOW_UPDATE frame with increment size', frame.increment_size)
                else:
                    print('Receive WINDOW_UPDATE frame with increment size', frame.increment_size, 'for stream', frame.stream_id)
            elif isinstance(frame, Frame):
                print('Received frame', frame)
                dest_stream = streams[frame.stream_id]
                reply_frames, end_headers, end_stream, new_stream_id = dest_stream.receive_frame(frame)

                if frame.stream_id in raw_cbs:
                    header_cb, data_cb = raw_cbs[frame.stream_id]

                    if isinstance(frame, DataFrame):
                        data_cb(self, frame.data)

                    if end_headers and new_stream_id == 0:
                        header_cb(self, inflater.inflate(dest_stream.fields_buffer))

                for frame in reply_frames:
                    send_queue.append(frame)
                if new_stream_id > 0:
                    print("Launch new stream with id", new_stream_id)
                    print("Stream", frame.stream_id, "headers:", inflater.inflate(dest_stream.pp_fields_buffer))
                    streams[new_stream_id] = Stream(new_stream_id)
                    promised_pushes.append((inflater.inflate(dest_stream.pp_fields_buffer), streams[new_stream_id]))
                if end_stream:
                    print("Stream", frame.stream_id, "ended")
                    print(" headers:", inflater.inflate(dest_stream.fields_buffer))
                    print(" data:", dest_stream.data_buffer)
                    if dest_stream.stream_id in response_cbs:
                        response_cbs[dest_stream.stream_id](self, inflater.inflate(dest_stream.fields_buffer), dest_stream.data_buffer)

        _send_frames()

    def _on_tcp_error(conn: net.TCPConnection, error: str) -> None:
        #on_error(self, error)
        pass

    def _on_remote_close(con: net.TLSConnection) -> None:
        #on_remote_close(self)
        pass

    def _send_frames():
        print("Send queue:", send_queue)
        for frame in send_queue:
            if tcp_conn is not None:
                send_queue.pop(0)
                send_bytes = frame.serialize()
                print("Sending frame:", frame)
                print("Sending TCP data: ", send_bytes)
                tcp_conn.write(send_bytes)

    def start_raw_stream(on_header_recv: action(Http2Client, dict[str, str]) -> None, on_data_recv: action(Http2Client, bytes) -> None) -> u32:
        new_stream: Stream = Stream(u32(next_stream_id))

        streams[new_stream.stream_id] = new_stream
        raw_cbs[new_stream.stream_id] = (on_header_recv, on_data_recv)
        next_stream_id += 2

        return new_stream.stream_id

    def raw_send_headers(stream_id: u32, headers: dict[str, str], end_stream: bool):
        header_data = deflater.deflate(headers)

        if len(header_data) < max_frame_size:
            header_frame = HeadersFrame(header_data, 0, stream_id, False, True, end_stream)
            send_queue.append(header_frame)
        else:
            header_frame = HeadersFrame(header_data[:max_frame_size], 0, stream_id, False, False, end_stream)
            send_queue.append(header_frame)
            header_data = header_data[max_frame_size:]

            while len(header_data) > max_frame_size:
                send_queue.append(ContinuationFrame(header_data[:max_frame_size], stream_id, False))
                header_data = header_data[max_frame_size:]

            send_queue.append(ContinuationFrame(header_data, stream_id, True))

    def raw_send_data(stream_id: u32, data: bytes, end_stream: bool):
        while len(data) > max_frame_size:
             send_queue.append(DataFrame(data[:max_frame_size], 0, stream_id, False))
             data = data[max_frame_size:]

        send_queue.append(DataFrame(data, 0, stream_id, end_stream))

    def get(path: str, on_response: action(Http2Client, dict[str, str], bytes) -> None):
        print("next_stream_id: ", next_stream_id)
        new_stream: Stream = Stream(u32(next_stream_id))
        print("new_stream.stream_id: ", new_stream.stream_id)
        streams[new_stream.stream_id] = new_stream
        next_stream_id += 2
        print("new_stream.stream_id: ", new_stream.stream_id)
        headers = { ':method': 'GET',
                    ':scheme': 'http',
                    ':authority': address,
                    ':path': path }
        #new_response: Response = Response(headers, on_response)
        #responses[new_stream.stream_id] = new_response
        response_cbs[new_stream.stream_id] = on_response

        header_data = deflater.deflate(headers)
        print("New stream id: ", new_stream.stream_id)
        print("Compressed header data: ", header_data)
        header_frame = HeadersFrame(header_data, 0, new_stream.stream_id, False, True, True)

        send_queue.append(header_frame)
        if ready:
            _send_frames()

        #on_response(self, 418, b'I am a teapot')

    def post(path: str, body: bytes, on_response: action(Http2Client, dict[str, str], bytes) -> None):
        print("next_stream_id: ", next_stream_id)
        new_stream: Stream = Stream(u32(next_stream_id))
        print("new_stream.stream_id: ", new_stream.stream_id)
        streams[new_stream.stream_id] = new_stream
        next_stream_id += 2
        print("new_stream.stream_id: ", new_stream.stream_id)
        headers = { ':method': 'POST',
                    ':scheme': 'http',
                    ':authority': address,
                    ':path': path }
        #new_response: Response = Response(headers, on_response)
        #responses[new_stream.stream_id] = new_response
        response_cbs[new_stream.stream_id] = on_response

        header_data = deflater.deflate(headers)
        print("New stream id: ", new_stream.stream_id)
        print("Compressed header data: ", header_data)
        header_frame = HeadersFrame(header_data, 0, new_stream.stream_id, False, True, False)

        send_queue.append(header_frame)

        while len(body) > max_frame_size:
             send_queue.append(DataFrame(body[:max_frame_size], 0, new_stream.stream_id, False))
             body = body[max_frame_size:]

        send_queue.append(DataFrame(body, 0, new_stream.stream_id, True))

        if ready:
            _send_frames()

    _connect()

def _test_get(env: Env):
    pass

def exit(env: Env):
    env.exit(0)

actor main(env):

    #_test_get(env)
    def _on_connect(client: Http2Client):
        pass

    def _on_error(client: Http2Client, message: str):
        print(message)

    def _on_response(client: Http2Client, http_headers: dict[str, str], payload: bytes):
        print(http_headers)
        print(payload)
        env.exit(0)

    #139.162.123.134
    test_client = Http2Client(net.TCPConnectCap(net.TCPCap(net.NetCap(env.cap))), 'nghttp2.org', 80, _on_connect, _on_error)
    #test_client = Http2Client(net.TCPConnectCap(net.TCPCap(net.NetCap(env.cap))), 'localhost', 8080, _on_connect, _on_error)

    #tls_conn = net.TLSConnection(net.TCPConnectCap(net.TCPCap(net.NetCap(env.cap))), 'nghttp2.org', 443, _on_tls_connect, _on_tls_receive, _on_tls_error, _on_remote_close, True)
    #after 10: exit(env)
    #test_client.get('/testget', _on_response)
    #test_client.post('/testpost', b'foobar', _on_response)
    test_client.get('/', _on_response)
